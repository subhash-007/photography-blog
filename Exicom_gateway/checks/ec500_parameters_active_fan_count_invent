#!/usr/bin/python
"""
activeFanCount of poller device.

This is part of device application.
Poller script determines the activeFanCount of device.
poller script takes the snmp value of OID .1.3.6.1.4.1.38016.14.8.3 from snmp agent of device at specific interval.
Device activeFanCount is sent to device application

"""
# ######################################################################
# Function: check_ec500_parameters_active_fan_count_invent
#
# Parameters: info (SNMP Ouput) params (No Parameters)
#
# Output: device parameters_active_fan_count
# ######################################################################
ec500_parameters_active_fan_count_default_levels = ()

def check_ec500_parameters_active_fan_count_invent(item, params, info):
    """
            check_ec500_parameters_active_fan_count_invent function fetches the activeFanCount

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                                        3: unknown
                        infotext(string):
                                    plugin output
                                    Example : OK - ;;;;

                        Raises:
                               Exception
    """
    state = 3
    infotext = "unknown_value"
    perf_data = ['']
    if info:
        try:
            state = 0
            try :
                ec500_parameters_active_fan_count = float(info[0][0])
            except Exception,e:
                ec500_parameters_active_fan_count = str(info[0][0].replace(" ","@"))
            perf_data = [("ec500_parameters_active_fan_count", ec500_parameters_active_fan_count)]
            return (state, "ec500_parameters_active_fan_count=%s" % ec500_parameters_active_fan_count, perf_data)
        except Exception,e:
            return (3, "ec500_parameters_active_fan_count=%s" % infotext.replace(" ","@"), perf_data)
    else:
        return (state, "ec500_parameters_active_fan_count=%s" %"No data retrieved".replace(" ","@"), perf_data)


# This check works on all SNMP hosts
"""
    Dictionary-based declaration of all check types
"""
check_info["ec500_parameters_active_fan_count_invent"] = {
    'check_function':          check_ec500_parameters_active_fan_count_invent,
    'service_description':     'ec500_parameters_active_fan_count_invent',
    'has_perfdata':		True,
}

#########################################################################
#	SNMP OID for the device activeFanCount
#########################################################################
snmp_info["ec500_parameters_active_fan_count_invent"] = ('.1.3.6.1.4.1.38016.14', ['8.3'])
